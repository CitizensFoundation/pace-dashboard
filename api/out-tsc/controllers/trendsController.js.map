{"version":3,"file":"trendsController.js","sourceRoot":"","sources":["../../controllers/trendsController.ts"],"names":[],"mappings":"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","sourcesContent":["import express from \"express\";\n//import Post from './post.interface';\nconst { Client } = require(\"@elastic/elasticsearch\");\n\nexport class TrendsController {\n  public path = \"/api/trends\";\n  public router = express.Router();\n  public esClient: typeof Client;\n\n  /*private posts: Post[] = [\n    {\n      author: 'Marcin',\n      content: 'Dolor sit amet',\n      title: 'Lorem Ipsum',\n    }\n  ];*/\n\n  constructor() {\n    this.intializeRoutes();\n  }\n\n  public intializeRoutes() {\n    this.router.get(this.path + \"/getTopicTrends\", this.getTopicTrends);\n    this.router.get(this.path + \"/getTopicQuotes\", this.getTopicQuotes);\n    //    this.router.post(this.path, this.createAPost);\n  }\n\n  public setEsClient(esClient: typeof Client) {\n    this.esClient = esClient;\n  }\n\n  getTopicTrends = async (\n    request: express.Request,\n    response: express.Response\n  ) => {\n\n    const body: any = {\n      aggs: {\n        \"2\": {\n          date_histogram: {\n            field: \"createdAt\",\n            calendar_interval: \"1y\",\n            time_zone: \"Atlantic/Reykjavik\",\n            min_doc_count: 1,\n          },\n        },\n      },\n      size: 0,\n      stored_fields: [\"*\"],\n      script_fields: {},\n      docvalue_fields: [{ field: \"createdAt\", format: \"date_time\" }],\n      _source: { excludes: [] },\n      query: {\n        bool: {\n          must: [],\n          filter: [\n            { match_all: {} },\n            { match_phrase: { topic: request.query.topic } },\n            {\n              range: {\n                createdAt: {\n                  gte: \"2006-03-01T01:57:35.660Z\",\n                  lte: \"2021-03-01T01:57:35.660Z\",\n                  format: \"strict_date_optional_time\",\n                },\n              },\n            }\n          ],\n          should: [],\n          must_not: [\n            { \"term\" : { \"relevanceScore\" : 0 } }\n          ],\n        },\n      },\n    };\n\n    try {\n      const result = await this.esClient.search({\n        index: \"urls\",\n        body: body,\n      });\n      response.send(result.body.aggregations[\"2\"].buckets);\n      console.log(result);\n    } catch (ex) {\n      console.error(ex);\n      response.sendStatus(500);\n    }\n  };\n\n  getTopicQuotes = async (\n    request: express.Request,\n    response: express.Response\n  ) => {\n    let returnQuotes:any = [];\n    const years = [\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\"];\n\n    const must = [];\n    const mustNot = [];\n\n    must.push({ term: { oneTwoRelevanceScore: 1 } });\n\n    if (request.query.topic==\"Left behind\") {\n      //must.push({\"match\": {\"paragraph\": \".*eft behind.*\" }});\n      //must.push({\"match\": {\"paragraph\": \".*global.*\" }});\n      //must.push({\"match\": {\"subTopic\": \"Globalism\" }});\n    }\n\n    if (request.query.topic==\"Resentment of elite\") {\n       mustNot.push({\"match\": {\"subTopic\": \"Climate denial\" }});\n    }\n\n    mustNot.push({ term: { relevanceScore: 0 } });\n\n    /*must.push({\n      \"script\": {\n        \"script\": \"doc['paragraph'].length < 100\"\n      }\n    })*/\n\n    for (let i=0;i<years.length;i++) {\n      const year = years[i];\n\n      const body: any = {\n        from: 0,\n        size: 1,\n        query: {\n          function_score: {\n            query: {\n              bool: {\n                \"must\": must,\n                filter: [\n                  { match_all: {} },\n                  { match_phrase: { topic: request.query.topic } },\n                  {\n                    range: {\n                      createdAt: {\n                        gte: `${year}-01-01T00:00:00.000Z`,\n                        lte: `${year}-12-31T23:59:59.990Z`,\n                        format: \"strict_date_optional_time\",\n                      },\n                    },\n                  },\n                  {\n                    range: {\n                      pageRank: {\n                        gte: 0,\n                        lte: 100000000,\n                        format: \"strict_date_optional_time\",\n                      },\n                    },\n                  },\n                ],\n                should: [],\n                must_not: mustNot,\n              },\n            },\n            random_score: {},\n          }\n        },\n      };\n\n      try {\n        const result = await this.esClient.search({\n          index: \"urls\",\n          body: body,\n        });\n        returnQuotes = returnQuotes.concat(result.body.hits.hits);\n      } catch (ex) {\n        console.error(ex);\n        response.sendStatus(500);\n      }\n    }\n\n    response.send(returnQuotes);\n  };\n\n  createAPost = (request: express.Request, response: express.Response) => {\n    //    const post: Post = request.body;\n    //    this.posts.push(post);\n    //    response.send(post);\n  };\n}\n"]}