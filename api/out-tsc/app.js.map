{"version":3,"file":"app.js","sourceRoot":"","sources":["../app.ts"],"names":[],"mappings":";;;AAAA,qCAA8B;AAC9B,6CAAqC;AACrC,6BAA6B;AAE7B,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAA;AAEpD,MAAa,GAAG;IAKd,YAAY,WAAuB,EAAE,IAAY;QAC/C,IAAI,CAAC,GAAG,GAAG,iBAAO,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,GAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC;QAElD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAI,aAAa,EAAE;YACzC,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC;gBACzB,IAAI,EAAE,iFAAiF;aACxF,CAAC,CAAA;YACR,qEAAqE;SAChE;aAAM,IAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE;YAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC;gBACzB,IAAI,EAAE,iFAAiF;gBACvF,KAAK,EAAG,OAAO,CAAC,GAAG,CAAC,oBAAoB;aACzC,CAAC,CAAA;YACF,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAA;SACpC;aAAO;YACN,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC;gBACzB,IAAI,EAAE,iFAAiF;aACxF,CAAC,CAAA;SACH;QAED,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAEO,qBAAqB;QAC3B,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE;YAC9E,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAC/B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,aAAa,CAAE,GAAG,EAAE,GAAG,EAAE,IAAI;gBACjD,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAA;gBACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;oBAC/B,GAAG,CAAC,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;iBACvD;qBAAM;oBACL,OAAO,IAAI,EAAE,CAAC;iBACf;YACH,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC;IAEO,qBAAqB,CAAC,WAAuB;QACnD,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACjC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE;YAC9B,OAAO,CAAC,GAAG,CAAC,6BAA6B,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA3DD,kBA2DC","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport * as path from 'path';\nimport * as url from 'url';\nconst { Client } = require('@elastic/elasticsearch')\n\nexport class App {\n  public app: express.Application;\n  public esClient: typeof Client;\n  public port: number;\n\n  constructor(controllers: Array<any>, port: number) {\n    this.app = express();\n    this.port =  parseInt(process.env.PORT || \"8000\");\n\n    if (process.env.NODE_ENV=== 'development') {\n      this.esClient = new Client({\n        node: 'https://search-pace-dev-1-jv4lkhrngfqvb3wiwkrcvpsr7m.us-east-1.es.amazonaws.com'\n      })\n//      this.esClient = new Client({ node: 'http://localhost:9200' })\n    } else if (process.env.QUOTAGUARDSTATIC_URL) {\n      this.esClient = new Client({\n        node: 'https://search-pace-dev-1-jv4lkhrngfqvb3wiwkrcvpsr7m.us-east-1.es.amazonaws.com',\n        proxy:  process.env.QUOTAGUARDSTATIC_URL\n      })\n      console.log(\"USING QUOTAGUARD_URL\")\n    } else  {\n      this.esClient = new Client({\n        node: 'https://search-pace-dev-1-jv4lkhrngfqvb3wiwkrcvpsr7m.us-east-1.es.amazonaws.com'\n      })\n    }\n\n    this.initializeMiddlewares();\n    this.initializeControllers(controllers);\n  }\n\n  private initializeMiddlewares() {\n    if (process.env.NODE_ENV !== 'development' && !process.env.DISABLE_FORCE_HTTPS) {\n      this.app.enable('trust proxy');\n      this.app.use(function checkProtocol (req, res, next) {\n        console.log(`Protocol ${req.protocol}`)\n        if (!/https/.test(req.protocol)) {\n          res.redirect(\"https://\" + req.headers.host + req.url);\n        } else {\n          return next();\n        }\n      });\n    }\n\n    this.app.use(bodyParser.json());\n    this.app.use(express.static(path.join(__dirname, '/../web-app/dist')));\n  }\n\n  private initializeControllers(controllers: Array<any>) {\n    controllers.forEach((controller) => {\n      controller.setEsClient(this.esClient);\n      this.app.use('/', controller.router);\n    });\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      console.log(`App listening on the port ${this.port}`);\n    });\n  }\n}\n"]}